name: Code Quality

on:
  pull_request:
    branches: [dev, main]
  push:
    branches: [dev, main]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  security-scan:
    name: Security Scan (CodeQL)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['python']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v4

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4
        with:
          category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  code-coverage:
    name: Code Coverage Report
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: portfolio_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run migrations
        env:
          DJANGO_SETTINGS_MODULE: core.settings
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/portfolio_test
        run: |
          python manage.py migrate --noinput

      - name: Run tests with coverage
        env:
          DJANGO_SETTINGS_MODULE: core.settings
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/portfolio_test
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Coverage comment
        uses: py-cov-action/python-coverage-comment-action@v3
        if: github.event_name == 'pull_request'
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 80
          MINIMUM_ORANGE: 60

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  complexity-check:
    name: Code Complexity Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install tools
        run: |
          pip install radon xenon

      - name: Check cyclomatic complexity
        run: |
          echo "Checking cyclomatic complexity..."
          radon cc . -a -nb --total-average

      - name: Check maintainability index
        run: |
          echo "Checking maintainability index..."
          radon mi . -nb

      - name: Enforce complexity limits
        run: |
          xenon --max-absolute B --max-modules B --max-average A . || echo "⚠️ Complexity warning"
        continue-on-error: true

  linting:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          pip install flake8 pylint black isort

      - name: Run flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Check code formatting (black)
        run: |
          black --check --diff . || echo "⚠️ Code formatting could be improved"
        continue-on-error: true

      - name: Check import sorting (isort)
        run: |
          isort --check-only --diff . || echo "⚠️ Import sorting could be improved"
        continue-on-error: true

      - name: Run pylint
        run: |
          pylint --exit-zero --rcfile=/dev/null apps/ core/ || echo "⚠️ Pylint warnings found"
        continue-on-error: true
